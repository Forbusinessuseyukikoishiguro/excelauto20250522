# Let Python Handle the Tedious Work! Auto-Generate Excel File Lists from Folders

## 🤔 Sound Familiar?

"How many Excel files are in this folder anyway?"
"I wish I could see all the file sizes and modification dates in one view..."
"Checking each file manually is so tedious and error-prone!"

**That's exactly when Python comes to the rescue!** Whether you have dozens or hundreds of Excel files, just a few lines of code can organize them instantly.

## 💡 Python Solution: Automated Excel Inventory Tool

Today, I'll show you how to create a tool that automatically scans a specified folder for Excel files and generates a detailed inventory list with comprehensive file information.

### 🎯 What This Tool Does

- ✅ Automatically scans folders for all Excel files
- ✅ Lists filenames, sizes, and modification dates
- ✅ Saves results as a new Excel file
- ✅ Auto-generates summary information
- ✅ Just run it! No manual work required

## 🛠️ Prerequisites

### Required Libraries
```bash
pip install pandas openpyxl
```

### Environment
- Python 3.7+
- Works on Windows/Mac/Linux

## 📝 Complete Code

```python
import os
import pandas as pd
from datetime import datetime
import glob

def create_excel_file_list():
    """
    Create a list of Excel files in specified folder and save as new Excel file
    """
    # 🎯 Target folder path (change this to your folder)
    target_folder = r"C:\Users\yukik\Desktop\excel_auto2025052"
    
    # Check if folder exists
    if not os.path.exists(target_folder):
        print(f"❌ Folder not found: {target_folder}")
        return
    
    # 📊 Excel file extension patterns
    excel_extensions = ['*.xlsx', '*.xls', '*.xlsm', '*.xlsb']
    
    # 🔍 Create list of Excel files
    excel_files = []
    
    for extension in excel_extensions:
        pattern = os.path.join(target_folder, extension)
        files = glob.glob(pattern)
        excel_files.extend(files)
    
    # 📋 Organize file information
    file_info_list = []
    
    for file_path in excel_files:
        file_name = os.path.basename(file_path)
        file_size = os.path.getsize(file_path)
        # Convert file size to KB
        file_size_kb = round(file_size / 1024, 2)
        
        # Get modification time
        modification_time = os.path.getmtime(file_path)
        modification_date = datetime.fromtimestamp(modification_time).strftime('%Y-%m-%d %H:%M:%S')
        
        file_info_list.append({
            'File Name': file_name,
            'File Size (KB)': file_size_kb,
            'Last Modified': modification_date,
            'Full Path': file_path
        })
    
    # 📊 Create DataFrame
    df = pd.DataFrame(file_info_list)
    
    # Sort by filename
    df = df.sort_values('File Name').reset_index(drop=True)
    
    # 💾 Generate output filename with current timestamp
    current_time = datetime.now().strftime('%Y%m%d_%H%M%S')
    output_filename = f"Excel_File_List_{current_time}.xlsx"
    output_path = os.path.join(target_folder, output_filename)
    
    # 📁 Save as Excel file
    try:
        with pd.ExcelWriter(output_path, engine='openpyxl') as writer:
            # Save to main sheet
            df.to_excel(writer, sheet_name='Excel File List', index=False)
            
            # Save summary information to separate sheet
            summary_data = {
                'Item': ['Total Files', 'Created Date', 'Target Folder'],
                'Value': [len(df), datetime.now().strftime('%Y-%m-%d %H:%M:%S'), target_folder]
            }
            summary_df = pd.DataFrame(summary_data)
            summary_df.to_excel(writer, sheet_name='Summary', index=False)
            
            # 🎨 Worksheet formatting
            workbook = writer.book
            worksheet = writer.sheets['Excel File List']
            
            # Auto-adjust column widths
            for column in worksheet.columns:
                max_length = 0
                column_letter = column[0].column_letter
                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass
                adjusted_width = min(max_length + 2, 50)
                worksheet.column_dimensions[column_letter].width = adjusted_width
        
        # 🎉 Display results
        print(f"✅ Excel file list created: {output_filename}")
        print(f"📁 Saved to: {output_path}")
        print(f"📊 Excel files detected: {len(df)}")
        
        # Display detected files
        if len(df) > 0:
            print("\n📋 Detected Excel Files:")
            for i, row in df.iterrows():
                print(f"  {i+1:2d}. {row['File Name']} ({row['File Size (KB)']}KB)")
        else:
            print("❌ No Excel files found in the specified folder")
            
    except Exception as e:
        print(f"❌ Error occurred: {str(e)}")

def main():
    """
    Main execution function
    """
    print("=" * 60)
    print("🔍 Excel File Inventory Tool")
    print("=" * 60)
    
    create_excel_file_list()
    
    print("\n" + "=" * 60)
    print("✨ Process Complete! Great job!")
    input("Press Enter to exit...")

if __name__ == "__main__":
    main()
```

## 🚀 How to Use

### Step 1: Set Your Folder Path
```python
# Change this to your target folder path
target_folder = r"C:\Users\YourUsername\Desktop\YourTargetFolder"
```

### Step 2: Run the Script
```bash
python excel_list_creator.py
```

### Step 3: Check Results
When executed, you'll see output like this:

```
============================================================
🔍 Excel File Inventory Tool
============================================================
✅ Excel file list created: Excel_File_List_20250522_143025.xlsx
📁 Saved to: C:\Users\yukik\Desktop\excel_auto2025052\Excel_File_List_20250522_143025.xlsx
📊 Excel files detected: 15

📋 Detected Excel Files:
   1. Sales_Data_2024.xlsx (245.7KB)
   2. Inventory_Management.xlsx (89.3KB)
   3. Customer_List.xlsm (156.8KB)
   ...
```

## 📊 Output Excel File Contents

### "Excel File List" Sheet
| File Name | File Size (KB) | Last Modified | Full Path |
|-----------|----------------|---------------|-----------|
| Sales_Data_2024.xlsx | 245.7 | 2025-05-20 14:30:25 | C:\Users\...\Sales_Data_2024.xlsx |
| Inventory_Management.xlsx | 89.3 | 2025-05-22 09:15:10 | C:\Users\...\Inventory_Management.xlsx |

### "Summary" Sheet
| Item | Value |
|------|-------|
| Total Files | 15 |
| Created Date | 2025-05-22 14:30:25 |
| Target Folder | C:\Users\yukik\Desktop\excel_auto2025052 |

## ⚡ Code Highlights

### 1. Multiple Extension Support
```python
excel_extensions = ['*.xlsx', '*.xls', '*.xlsm', '*.xlsb']
```
Detects legacy Excel files and macro-enabled files too!

### 2. Automatic File Information Retrieval
```python
file_size = os.path.getsize(file_path)
modification_time = os.path.getmtime(file_path)
```
Automatically gets file size and modification time, converting to readable format.

### 3. Beautiful Excel Output
```python
# Auto-adjust column widths
for column in worksheet.columns:
    # Calculate optimal column width
    adjusted_width = min(max_length + 2, 50)
    worksheet.column_dimensions[column_letter].width = adjusted_width
```
Output Excel file is beautifully formatted and ready to use!

## 🔧 Customization Examples

### Search Specific Extensions Only
```python
# Include PDF files too
excel_extensions = ['*.xlsx', '*.xls', '*.pdf']
```

### Filter by File Size
```python
# Only files 100KB or larger
if file_size_kb >= 100:
    file_info_list.append({...})
```

### Include Subfolders
```python
# Recursively search subfolders
for extension in excel_extensions:
    pattern = os.path.join(target_folder, '**', extension)
    files = glob.glob(pattern, recursive=True)
```

## 💼 Practical Use Cases

### 🏢 Business Applications
- **Monthly Reporting**: Instantly catalog Excel files in project folders
- **Data Organization**: Identify old or duplicate files for cleanup
- **Backup Planning**: Pre-check total file count and size before backup

### 🏠 Personal Use
- **Budget Management**: Organize annual/monthly budget spreadsheets
- **Photo Organization**: Modify extensions to catalog image files
- **Document Management**: Manage PDFs of contracts and receipts

## 🎯 Summary

**What takes 30 minutes manually, Python does in 3 seconds!**

Tool Benefits:
- ⚡ **Massive Time Savings**: Process hundreds of files instantly
- 🎯 **Perfect Accuracy**: Zero human error
- 🔄 **Reusability**: Create once, use forever
- 📊 **Detailed Information**: Auto-capture file sizes and dates
- 🎨 **Professional Output**: Pre-formatted Excel files

## 🚀 Next Steps

Build on this foundation with advanced features:

- 📈 **Charts**: Visualize file size distribution
- 🔍 **Search Function**: Find files containing specific keywords
- 📧 **Email Integration**: Auto-send results via email
- 🕐 **Scheduled Execution**: Run automatically on schedule

**Let Python handle the tedious work while you focus on high-value tasks!**

---

*Found this helpful? Give it a try and see how programming can transform your daily workflow efficiency!*
